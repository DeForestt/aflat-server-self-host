.needs <std>
import Result from "Utils/Result";
import Map from "Utils/Map";
import Server from "HTTP/Server";
import GET, POST, PUT, DELETE from "HTTP/Endpoints";
import Middleware from "HTTP/Middleware";
import HTTPMessage, HTTPResponce, NotImplementedError from "HTTP";
import Endpoints, NotFoundImpl from "HTTP/Endpoint";
import Content from "Web/Content";
import {methodToString} from "HTTP" under http;
import {print} from "String" under str;
import {accept, reject} from "Utils/Result" under res;

import Index, Example, GettingStarted, InstallScript, NotFoundPage from "./src/UI/Index";
import Package from "./src/API/Package";

class AflatServer signs Server {

	Map logRequest() : Middleware {
		return {
			"after": [Server __s, HTTPMessage req, HTTPResponce r] => {
				str.print(`[{http.methodToString(req.method)}] {req.endpoint}\n`);
				str.print(`\t{r.getStatusCode()} {r.getStatusMessage()}\n`);
				return r;
			}
		};
	};

	Index indexHTMX = new Index();
	Example exampleHTMX = new Example();
	GettingStarted gettingStartedHTMX = new GettingStarted();
	InstallScript installScriptSH = new InstallScript();


	HTTPResponce NotFound(HTTPMessage req) : NotFoundImpl {
		const NotFoundPage notFoundPage = new NotFoundPage();
		str.print(`[{http.methodToString(req.method)}] {req.endpoint}\n`);
		notFoundPage.method = http.methodToString(req.method);
		notFoundPage.endpoint = req.endpoint;
		let resp = new HTTPResponce(notFoundPage.render(), "404", "Not Found");
		resp.addHeader("Content-Type", "text/html");
		return resp;
	};

	Result example() : GET("/examples") {
		let resp = new HTTPResponce(my.exampleHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		return res.accept(resp);
	};

	Result gettingStarted() : GET("/getting-started") {
		let resp = new HTTPResponce(my.gettingStartedHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		return res.accept(resp);
	};

	Result installScript() : GET("/install.sh") {
		let resp = new HTTPResponce(my.installScriptSH.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		return res.accept(resp);
	};

	Result index() : GET("/") {
		let resp = new HTTPResponce(my.indexHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		return res.accept(resp);
	};

	Result getPackage() : GET("/api/package") {
		let package = new Package("Aflat");
		let resp = new HTTPResponce(package.toString().cstr(), "200", "OK");
		resp.addHeader("Content-Type", "application/json");
		return res.accept(resp);
	};

	AflatServer init() {
		return my;
	};
};


int main() {
	let server = AflatServer();
	server.listen();
	return 0;
};
