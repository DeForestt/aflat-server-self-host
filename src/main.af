.needs <std>
import Result from "Utils/Result";
import Map from "Utils/Map";
import Server from "HTTP/Server";
import GET, POST, PUT, DELETE from "HTTP/Endpoints";
import Middleware from "HTTP/Middleware";
import HTTPMessage, HTTPResponce, NotImplementedError, NotFoundError from "HTTP";
import Endpoints, NotFoundImpl from "HTTP/Endpoint";
import Content from "Web/Content";
import Option from "Utils/Option";
import string from "String";
import {methodToString} from "HTTP" under http;
import {accept, reject} from "Utils/Result" under res;
import { info, warning } from "./src/flat_log" under log;

import Index, Example, GettingStarted, InstallScript, NotFoundPage, InstallPackage from "./src/UI/Index";
import Package from "./src/API/Package";

private string nameFromGit(string repo) {
	let parts = repo.split('/');
	string last = parts.back().or(``);
	return last;
};

class AflatServer signs Server {

	Map logRequest() : Middleware {
		return {
			"after": [Server __s, HTTPMessage req, HTTPResponce r] => {
				log.info(`[{http.methodToString(req.method)}] {req.endpoint}\n`);
				log.info(`\t{r.getStatusCode()} {r.getStatusMessage()}\n`);
				return r;
			}
		};
	};

	Index indexHTMX = new Index();
	Example exampleHTMX = new Example();
	GettingStarted gettingStartedHTMX = new GettingStarted();
	InstallScript installScriptSH = new InstallScript();
	InstallPackage installPackageSH = new InstallPackage();



	HTTPResponce NotFound(HTTPMessage req) : NotFoundImpl {
		const NotFoundPage notFoundPage = new NotFoundPage();
		log.warning(`[{http.methodToString(req.method)}] {req.endpoint}\n`);
		log.warning(`\t attempted to access a non-existant page {req.endpoint} \n`);
		notFoundPage.method = http.methodToString(req.method);
		notFoundPage.endpoint = req.endpoint;
		let resp = new HTTPResponce(notFoundPage.render(), "404", "Not Found");
		resp.addHeader("Content-Type", "text/html");
		resp;
	};

	Result example() : GET("/examples") {
		let resp = new HTTPResponce(my.exampleHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		res.accept(resp)
	};

	Result gettingStarted() : GET("/getting-started") {
		let resp = new HTTPResponce(my.gettingStartedHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		res.accept(resp)
	};

	Result installPackage() : GET("/install-package.sh") {
		my.installPackageSH.name = `LIBRARY_NAME`;
		my.installPackageSH.repo = `github.com/DeForestt/test_repo`;
		let resp = new HTTPResponce(my.installPackageSH.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/plain");
		return res.accept(resp)
	};
	
	fn installScript() -> Result : GET("/install.sh") {
		let resp = new HTTPResponce(my.installScriptSH.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/plain");
		res.accept(resp)
	};

	fn index() -> Result : GET("/") {
		let resp = new HTTPResponce(my.indexHTMX.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/html");
		res.accept(resp)
	};

	fn getPackage(HTTPMessage __req, ? string repo) -> Result : GET("/api/package/:*") {
		string repoVal = repo.or(``);
		if repoVal == "" {
			res.reject(new NotImplementedError("Not Implemented"))
		};
		string name = nameFromGit(repoVal);

		if repoVal == "" | name == "" {
			res.reject(new NotFoundError("Not Found"))
		};

		my.installPackageSH.name = name;
		my.installPackageSH.repo = repoVal;

		let resp = new HTTPResponce(my.installPackageSH.render(), "200", "OK");
		resp.addHeader("Content-Type", "text/plain");
		res.accept(resp)
	};

	AflatServer init() {
		return my;
	};
};


fn main() {
	let server = AflatServer();
	server.listen();
	return 0;
};
